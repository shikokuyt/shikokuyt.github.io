<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Life | 前端君</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-26T15:14:00.186Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>maczyt</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue v-model用于组件通信的妙用</title>
    <link href="http://yoursite.com/2018/04/26/Vue-v-model%E7%94%A8%E4%BA%8E%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E7%9A%84%E5%A6%99%E7%94%A8/"/>
    <id>http://yoursite.com/2018/04/26/Vue-v-model用于组件通信的妙用/</id>
    <published>2018-04-26T14:52:31.000Z</published>
    <updated>2018-04-26T15:14:00.186Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js-v-model-用法"><a href="#Vue-js-v-model-用法" class="headerlink" title="Vue.js v-model 用法"></a>Vue.js v-model 用法</h1><p>通常我们使用<code>v-model</code>用于数据进行双向绑定，但基本用于组件内，对一个<code>input</code>框绑定一个<code>data</code>属性</p><p>但是如果我们把<code>v-model</code>用在组件上，我们可以用来做什么?</p><a id="more"></a><p>在平常面对的业务需求，我们往往会一个组件套一个组件，也就是父子组件，往往在子组件操作后，要把我们需要的数据返回给父组件，话不多说，上代码.</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Parent Component --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Child</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Child Component --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">"handleClick"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure><p>当我们在子组件中触发 click 事件，我们需要传一个数值 1 给父组件。</p><p>我们可以这样写:</p><h3 id="方案一-使用-emit"><a href="#方案一-使用-emit" class="headerlink" title="方案一: 使用$emit"></a>方案一: 使用$emit</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Parent Component --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Child</span> @<span class="attr">getNumber</span>=<span class="string">"getNumber"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">  export default &#123;</span></div><div class="line"><span class="undefined">    data() &#123;</span></div><div class="line"><span class="undefined">      return &#123;</span></div><div class="line"><span class="undefined">        num: 0,</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    &#125;,</span></div><div class="line"><span class="undefined">    methods: &#123;</span></div><div class="line"><span class="undefined">      getNumber(num) &#123;</span></div><div class="line"><span class="undefined">        this.num = num; // 1</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Child Component --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">"handleClick"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">  export default &#123;</span></div><div class="line"><span class="undefined">    methods: &#123;</span></div><div class="line"><span class="undefined">      handleClick() &#123;</span></div><div class="line"><span class="undefined">        this.$emit('getNumber', 1);</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><div class="tip"><br>  上面我们使用了传递父组件向子组件绑定一个<code>getNumber</code>事件, 这样在子组件中当点击按钮后使用$emit来触发<br></div><p>还有一种也就是使用<code>v-model</code>的方式来操作了</p><h3 id="新-get-的黑科技"><a href="#新-get-的黑科技" class="headerlink" title="新 get 的黑科技"></a>新 get 的黑科技</h3><p>我们需求是当在子组件中点击按钮，子组件向父组件传递数值 1</p><p>这样，我们可以直接对子组件进行<code>v-model</code>绑定, 还是上代码吧</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Parent Component --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Child</span> <span class="attr">v-model</span>=<span class="string">"num"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">  export default &#123;</span></div><div class="line"><span class="undefined">    data() &#123;</span></div><div class="line"><span class="undefined">      return &#123;</span></div><div class="line"><span class="undefined">        num: 0,</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Child Component --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">"handleClick"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">  export default &#123;</span></div><div class="line"><span class="undefined">    model: &#123;</span></div><div class="line"><span class="undefined">      prop: 'num',</span></div><div class="line"><span class="undefined">      event: 'getNumber',</span></div><div class="line"><span class="undefined">    &#125;,</span></div><div class="line"><span class="undefined">    props: &#123;</span></div><div class="line"><span class="undefined">      num: Number,</span></div><div class="line"><span class="undefined">    &#125;,</span></div><div class="line"><span class="undefined">    methods: &#123;</span></div><div class="line"><span class="undefined">      handleClick() &#123;</span></div><div class="line"><span class="undefined">        this.$emit('getNumber', 1);</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>可以说是在子组件中通过<code>v-model</code>过滤了一层事件绑定和<code>$emit</code></p><div class="tip"><br>  若有不对之处，恳请指出，谢谢.<br></div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Vue-js-v-model-用法&quot;&gt;&lt;a href=&quot;#Vue-js-v-model-用法&quot; class=&quot;headerlink&quot; title=&quot;Vue.js v-model 用法&quot;&gt;&lt;/a&gt;Vue.js v-model 用法&lt;/h1&gt;&lt;p&gt;通常我们使用&lt;code&gt;v-model&lt;/code&gt;用于数据进行双向绑定，但基本用于组件内，对一个&lt;code&gt;input&lt;/code&gt;框绑定一个&lt;code&gt;data&lt;/code&gt;属性&lt;/p&gt;
&lt;p&gt;但是如果我们把&lt;code&gt;v-model&lt;/code&gt;用在组件上，我们可以用来做什么?&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js JS" scheme="http://yoursite.com/tags/vue-js-JS/"/>
    
  </entry>
  
  <entry>
    <title>Function基本知识梳理</title>
    <link href="http://yoursite.com/2018/01/24/Function%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
    <id>http://yoursite.com/2018/01/24/Function基本知识梳理/</id>
    <published>2018-01-24T14:47:58.000Z</published>
    <updated>2018-01-24T15:13:15.069Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h1><blockquote><p>JS世界里的一等公民</p></blockquote><a id="more"></a><p>我们定义一个<code>main</code>函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// code</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>通过<code>main</code>变量，我们可以获取<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  length: 函数定义的形参个数,</div><div class="line">  name: 函数名,</div><div class="line">  <span class="built_in">arguments</span>: 实参类数组,</div><div class="line">  caller: 调用该函数的对象,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><div class="tip"><br>  未完待续<br></div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Function&quot;&gt;&lt;a href=&quot;#Function&quot; class=&quot;headerlink&quot; title=&quot;Function&quot;&gt;&lt;/a&gt;Function&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;JS世界里的一等公民&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Function JS" scheme="http://yoursite.com/tags/Function-JS/"/>
    
  </entry>
  
  <entry>
    <title>JS模拟事件</title>
    <link href="http://yoursite.com/2017/09/19/JS%E6%A8%A1%E6%8B%9F%E4%BA%8B%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/09/19/JS模拟事件/</id>
    <published>2017-09-19T13:46:30.000Z</published>
    <updated>2017-09-19T14:26:36.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模拟事件"><a href="#模拟事件" class="headerlink" title="模拟事件"></a>模拟事件</h1><blockquote><p>通过JS来触发特定的事件，并且会执行指定处理它们的事件处理函数。</p></blockquote><a id="more"></a><h2 id="DOM中的事件模拟"><a href="#DOM中的事件模拟" class="headerlink" title="DOM中的事件模拟"></a>DOM中的事件模拟</h2><ol><li>创建事件对象<ul><li><code>document.createEvent()</code></li><li>初始化该<code>event</code>对象</li></ul></li><li>触发事件 <code>dispatchEvent</code></li></ol><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><ol><li><strong>模拟鼠标事件</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建事件对象</span></div><div class="line"><span class="keyword">const</span> mouseEvent = <span class="built_in">document</span>.createEvent(<span class="string">'MouseEvents'</span>)</div><div class="line"></div><div class="line"><span class="comment">// define initMouseEvent methods</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * @param&#123; type: 事件类型 | String &#125;</span></div><div class="line"><span class="comment"> * @param&#123; bubbles: 是否冒泡 | Boolean &#125;</span></div><div class="line"><span class="comment"> * @param&#123; cancelable: 是否可以取消 | Boolean &#125;</span></div><div class="line"><span class="comment"> * @param&#123; view: 与事件关联的视图 | AbstractView &#125;</span></div><div class="line"><span class="comment"> * @param&#123; detail: 详细信息 | Number &#125;</span></div><div class="line"><span class="comment"> * @param&#123; screenX: 相对于屏幕的X坐标 | Number &#125;</span></div><div class="line"><span class="comment"> * @param&#123; screenY: 相对于屏幕的Y坐标 | Number &#125;</span></div><div class="line"><span class="comment"> * @param&#123; clientX: 相对于视口的X坐标 | Number &#125;</span></div><div class="line"><span class="comment"> * @param&#123; clientY: 相对于视口的Y坐标 | Number &#125;</span></div><div class="line"><span class="comment"> * @param&#123; ctrlKey: 是否按下了Ctrl键 | Boolean | default: false &#125;</span></div><div class="line"><span class="comment"> * @param&#123; altKey: 是否按下了Alt键 | Boolean | default: false &#125;</span></div><div class="line"><span class="comment"> * @param&#123; shiftKey: 是否按下shift键 | Boolean | default: false &#125;</span></div><div class="line"><span class="comment"> * @param&#123; metaKey: 是否按下meta键 | Boolean | default: false &#125;</span></div><div class="line"><span class="comment"> * @param&#123; button: 按下了哪一个鼠标键 | Number | default: 0 &#125;</span></div><div class="line"><span class="comment"> * @param&#123; relatedTarget: 与事件相关的对象 | Object | Options: mouseover or mouseout &#125;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="comment">// 初始化事件对象</span></div><div class="line">mouseEvent.initMouseEvent(<span class="string">'click'</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="built_in">document</span>.defaultView)</div><div class="line"></div><div class="line"><span class="comment">// 触发事件</span></div><div class="line">[some dom].dispatchEvent(mouseEvent)</div></pre></td></tr></table></figure><div class="tip"><br>  未完待续<br></div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模拟事件&quot;&gt;&lt;a href=&quot;#模拟事件&quot; class=&quot;headerlink&quot; title=&quot;模拟事件&quot;&gt;&lt;/a&gt;模拟事件&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;通过JS来触发特定的事件，并且会执行指定处理它们的事件处理函数。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JS EVENT" scheme="http://yoursite.com/tags/JS-EVENT/"/>
    
  </entry>
  
</feed>
